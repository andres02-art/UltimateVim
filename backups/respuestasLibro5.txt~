1 ejecutando el comando php artisan migrate:opcion
2 permite realizar commits a la base de datos
3 7 configuraciones: connection, que define el tipo de lenguaje en la base de datos; host que define la conneccion a la
base de datos; port, que define el puerto de ejecucion de la base de datos; database, que define el nombre de la base de
datos a utilizar; username, que define el nombre de usuario de la base de datos; password, que define la contraseÃ±a del
usuario de la base de datos y DB_UI_DEV,  que simplifica la conexion a la base de datos a partir de otros plugins
4 creando su modelo migratorio con el comando php artisan make:model -m
  5 php artisan migrate
6 --force (fuerza migrate), rollback (deshace un commitl), fresh (elimina y crea la base de datos nuevamente)
  7 con controladores mapeando la base de datos
  8 es la opcion para crear metodos genericos de controladores
  9 para realizar consultas sql en la base de datos con objetos php
  10 en un objeto de clase $request ->validate() lo realiza mediante un diccionario preestablecido
  11 su modelo migratorio como clase
12 create (crear), destroy (destruir), patch (subir), show (mostrar), index (solicitar), update (actualizar)
  13 un metodo para enviar contenido mediante url
  14 con el metodo redirect()->route( ruta )
15 los metodos get y post mediante form y route( ruta )
  16 name nombra una ruta
  17 route accede al nombre de una ruta
  18 @csrf
  19 @error, identifica el error en un request class; @if, directiva condicional;@foreach directiva ciclica; @extends
  directiva de importacion; @section, directiva de nominacion; @yield, directiva de exportacion; @method, indica el
  metodo a usar
  20 se inserta mediante @php o doble corchete {{}}
  21 estos son los encargados de realizar consultas sql: Tabla::all() (devuelve toda la tabla), Tabla->save() (realiza un
      inser), Tabla->update() (realiza un update), Tabla::find(x) (busca por columna)
  22 se importa el modelo migratorio a otro y se especifica en una funcion con el nombre del index la relacion funcion x
{ tabla1->hasMany(tabla2::class) }
  23 se crea la llave y su index table->forengID(x)->index() posteriormente se crea la relacion
  table->foreing(x)->references(column)->on(table)->onUpdate/Delete()->after(x)
24 es un metodo de route para condicionar el $request()
  25 es un metodo estatico para agrupar $request de un mismo controlador
  26 el primero que consiste en un diccionario con: la ruta, normal o con un prefijo en un diccionario; middleware, que
  consiste en un diccionario de rutas y el controller, en un diccionario especificando la clase como estatica. el
  segundo consisnte en una funcion anonima que agrupa las demas rutas que apuntan al mismo controlador
  27 en php en el diccionario de la base de datos
  28 en 'engine' este debe tener un modo dinamico
