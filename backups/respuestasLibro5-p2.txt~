1 al ser clases deben tener upercase en singular
2 $fillable, $hidden, $append y $cast deben ser protegidas del modelo
3 $fillable, crea un grupo de columnas que son accecibles con atajos; $hidden, oculta una columna de su consulta; $cast,
  pre procesa una columna en su creacion y consulta; $append, crea nuevas columnas exclusivas para la consulta.
  4 sirven para crear tablas y manejarlas como objetos, estas son las responsables de generar una conexion con la BD
  5 existen 2 tipos de relaciones Belongsto() que es de 1 a 1 y hasMany() que es de 1 a muchos
  6 mediante una funcion se expresa que tabla tiene dentro de si misma y su multiplicidad
  7 (Table::class, 'foreing key', 'Primary key')
  8 nombrar la funcion por la tabla y su multiplicidad, o nombrar la funcion por la relacion que tiene
  9 un accesor es una funcion para una columna de la tabla que al consultarla devuelve una nueva columna de $append, un
mutador es un preprosador de datos por columna para cambiar el dato insertado (muy util para contraseÃ±as)
  10 un mutador se define con la funcion setNombreColumna(), el nombre de la columna debe estar en un formato de
  upercase para que no conflictue con laravel
  11 es debido a que laravel usa preprocesadores para identificar y mapear las columnas de cada tabla con cada modelo
  12 en set se da en la misma columna donde se identifica la tabla con snipercase, en get se da en la variable $append
  donde nombra la nueva columna en snipercase
  13 un accesor se define con la funcion getNombreColumna(), este debe retornar la nueva columna snipercase de $append
  14 el nombre de la funcion y $append deben coincidir para crear la nuva columna en una consulta
  15 cast se define en la misma variable protegida ya que es un array tipo diccionario
  16 $fillable, $hidden, $append y $cast
  17 son protegidas
  18 son direcciones donde devuelve informacion api del modelo(tablas) que se encuentran en la base de datos tienen un
  prefigo de red \api\
    19 consisten en un json que puede ser consultado con cualquier lenguaje de programacion
    20 en escencia son metodos get put post y delete donde se manejan archivos json ya que es una generalizacion web
    21 funcionan mediante un request tipo ajax que devuelve el json correspondient como response con una respuestas HTTP
    22 un server genera 599 respuestas 100-199 son informacion, 200-299, son exitos, 300-399, son redirecciones, 400-499,
    son errores, 500-599 son fatal errores(errores de servidor)
  23 en el controllador, debido a que se debe crear funciones para responses api y para responses web
  24 en el enrrutador se debe especificar la variable que se esta enviando entre corchetes para que la funcion del
controlador la procese \url\{var1} fun x(Class1 $var1)
  25 la superclase y la clase funcionan con metodos dunder por ende se ejecutan automaticamente al pasar el objeto que
  coresponde a la clase se inicializa automaticamente
  26 la funcion dd() muestra el log de laravel
  27 la superclase Request de http y la superclase del modelo
  28 $request->all() se encarga de auto completar los datos pares que solo esten en el $fillable
  29 $user->refresh() se encarga de actualizar el modelo, $user->save() se encarga de guardar el modelo
  30 use SoftDeletes como clase dentro del modelo migratorio
  31 al $table->delete(x) se debe tener en cuenta si el modelo tine importado SoftDeletes, de lo contrario se elimina el
  registro completo
  32 ambos se llaman dentro de la funcion run del seeder de la base de datos, una vez echo eso se ejecuta el comando php
  artisan migrate --seed
  33 existen 4 tipos de consultas simples where(columna valor), find(valor), load(foreing), with(foreing)->get()
34 debido a que with es una preconsulta por ende se usa como metodo estatico desde el modelo Table::with()->get()
  35 load() acepta como parametro la relacion que se tiene en el modelo migratorio, este no es preconsulta por ende el
  objeto deve estar identificado
  36 acepta los valores de la columna o del la relacion en el modelo
37 2 tipos escenciales where(columna valor), has(columna)
  38 where busca la columna y el valor, has exije que tenga el valor, columna
  39 se hacen validaciones de frondt end y backend
  40 php artisan make:request
  41 funcionan a travez de un array tipo diccionario preestablecido donde se da la colunma de la tabla y las
  restricciones que se desea
  42 la funcion authorize inicializador y la funcion validations que retorna el array de validaciones
  43 los request para que funcionen las validaciones se deben enviar tipo ajax
  44 la funcion message retorna un array tipo diccionarion donde esta la columna.restriccion y el mensaje de error
45 las tablas foraneas se consultan con load() y with()
  46 4 escenciales, nullable, required, unique, confirmed
  47 uique:table, column, exceptions
  48 required
  49 confirmed
  50 numeric, string, min:x y el resto de la documentacion

